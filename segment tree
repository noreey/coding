#include <bits/stdc++.h>
using namespace std;
const int lim = 1 << 18;
struct segment_tree {
    // replace zero with LLONG_MIN for max query
    // replace zero with LLONG_MAX for min query
    long long a[2 * lim], arr_size = lim, zero = 0;
    segment_tree() {
        fill(a, a + 2 * lim, zero);
    }
    long long merge(long long a, long long b) {
        return a + b;
    }
    void update(int idx, long long val) {
        idx += arr_size;
        a[idx] = val;
        while(idx > 1) {
            idx >>= 1;
            a[idx] = merge(a[2 * idx], a[2 * idx + 1]);
        }
    }
    long long query(int nd, int cl, int cr, int l, int r) {
        if(cl >= l && cr <= r) {
            return a[nd];
        }
        else if(cl > r || cr < l)
            return 0;
        else {
            int mid = (cl + cr) / 2;
            return merge(query(2 * nd, cl, mid, l, r), query(2 * nd + 1, mid + 1, cr, l, r));
        }
    }
    long long query(int l, int r) {
        return query(1, 0, arr_size - 1, l, r);
    }
};
int main() {
    // checked using cses 1648
    int n, q;
    cin >> n >> q;
    segment_tree seg;
    for(int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        seg.update(i + 1, x);
    }
    for(int i = 0; i < q; ++i) {
        int t;
        cin >> t;
        if(t == 1) {
            int k, u;
            cin >> k >> u;
            seg.update(k, u);
        }
        else {
            int a, b;
            cin >> a >> b;
            cout << seg.query(a, b) << '\n';
        }
    }
}

/*
We have an array arr[0 . . . n-1]. We should be able to,  
Find the sum of elements from index l to r where 0 <= l <= r <= n-1
Change the value of a specified element of the array to a new value x. We need to do arr[i] = x where 0 <= i <= n-1. 
#include <bits/stdc++.h>
using namespace std;
  
// limit for array size
const int N = 100000; 
  
int n; // array size
  
// Max size of tree
int tree[2 * N];
  
// function to build the tree
void build( int arr[]) 
{ 
    // insert leaf nodes in tree
    for (int i=0; i<n; i++)    
        tree[n+i] = arr[i];
      
    // build the tree by calculating parents
    for (int i = n - 1; i > 0; --i)     
        tree[i] = tree[i<<1] + tree[i<<1 | 1];    
}
  
// function to update a tree node
void updateTreeNode(int p, int value) 
{ 
    // set value at position p
    tree[p+n] = value;
    p = p+n;
      
    // move upward and update parents
    for (int i=p; i > 1; i >>= 1)
        tree[i>>1] = tree[i] + tree[i^1];
}
  
// function to get sum on interval [l, r)
int query(int l, int r) 
{ 
    int res = 0;
      
    // loop to find the sum in the range
    for (l += n, r += n; l < r; l >>= 1, r >>= 1)
    {
        if (l&1) 
            res += tree[l++];
      
        if (r&1) 
            res += tree[--r];
    }
      
    return res;
}
  
// driver program to test the above function 
int main() 
{
    int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
  
    // n is global
    n = sizeof(a)/sizeof(a[0]);
      
    // build tree 
    build(a);
      
    // print the sum in range(1,2) index-based
    cout << query(1, 3)<<endl;
      
    // modify element at 2nd index
    updateTreeNode(2, 1);
      
    // print the sum in range(1,2) index-based
    cout << query(1, 3)<<endl;
  
    return 0;
}
https://www.geeksforgeeks.org/segment-tree-efficient-implementation/
*/
